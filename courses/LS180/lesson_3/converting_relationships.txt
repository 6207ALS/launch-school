// LS180 - Lesson 3, Relational Data and JOINS
// Converting a 1:M Relationship to a M:M Relationship Practice Problems


// Q1
FROM TERMINAL: psql -d database_name < dump_file
FROM PSQL CONSOLE: database_name=# \i dump_file


// Q2
CREATE TABLE directors_films (
  id serial PRIMARY KEY,
  director_id integer NOT NULL REFERENCES directors(id) ON DELETE CASCADE,
  film_id integer NOT NULL REFERENCES films(id) ON DELETE CASCADE,
  UNIQUE(director_id, film_id)
);


// Q3
INSERT INTO directors_films (film_id, director_id)
VALUES (1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6),
(7, 3), (8, 7), (9, 8), (10, 4);


// Q4
ALTER TABLE films
DROP COLUMN director_id;


// Q5
SELECT films.title, directors.name FROM films
JOIN directors_films ON directors_films.film_id = films.id
JOIN directors ON directors_films.director_id = directors.id
ORDER BY films.title;


// Q6
INSERT INTO films (title, year, genre, duration)
VALUES ('Fargo', 1996, 'comedy', 98),
('No Country for Old Men', 2007, 'western', 122),
('Sin City', 2005, 'crime', 124),
('Spy Kids', 2001, 'scifi', 88);

INSERT INTO directors (name)
VALUES ('Joel Coen'), ('Ethan Coen'), ('Frank Miller'), ('Robert Rodriguez');

INSERT INTO directors_films (film_id, director_id)
VALUES (11, 9), (12, 9), (12, 10), (13, 11), (13, 12), (14, 12);


// Q7
SELECT directors.name AS director, 
count(directors_films.film_id) AS films
FROM directors
JOIN directors_films ON directors.id = directors_films.director_id
GROUP BY directors.name
ORDER BY films DESC, director ASC;