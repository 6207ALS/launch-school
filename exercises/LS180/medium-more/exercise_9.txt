// LS180 - SQL Fundamentals, Medium: Subqueries and More, 
// Comparing SQL Statements


EXPLAIN ANALYZE SELECT MAX(bid_counts.count) FROM
  (SELECT COUNT(bidder_id) FROM bids GROUP BY bidder_id) AS bid_counts;

                                                  QUERY PLAN
---------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=37.15..37.16 rows=1 width=8) (actual time=0.018..0.018 rows=1 loops=1)
   ->  HashAggregate  (cost=32.65..34.65 rows=200 width=12) (actual time=0.015..0.016 rows=6 loops=1)
         Group Key: bids.bidder_id
         ->  Seq Scan on bids  (cost=0.00..25.10 rows=1510 width=4) (actual time=0.003..0.005 rows=26 loops=1)
 Planning Time: 0.511 ms
 Execution Time: 0.042 ms


EXPLAIN ANALYZE SELECT COUNT(bidder_id) AS max_bid FROM bids
GROUP BY bidder_id
ORDER BY max_bid DESC
LIMIT 1;

                                                  QUERY PLAN
---------------------------------------------------------------------------------------------------------------------
 Limit  (cost=35.65..35.65 rows=1 width=12) (actual time=0.028..0.029 rows=1 loops=1)
   ->  Sort  (cost=35.65..36.15 rows=200 width=12) (actual time=0.027..0.027 rows=1 loops=1)
         Sort Key: (count(bidder_id)) DESC
         Sort Method: top-N heapsort  Memory: 25kB
         ->  HashAggregate  (cost=32.65..34.65 rows=200 width=12) (actual time=0.013..0.015 rows=6 loops=1)
               Group Key: bidder_id
               ->  Seq Scan on bids  (cost=0.00..25.10 rows=1510 width=4) (actual time=0.003..0.005 rows=26 loops=1)
 Planning Time: 0.068 ms
 Execution Time: 0.048 ms


The first query (which uses a subquery) has an estimated start-up/total cost 
of 37.15 whereas the second query (which does not use a subquery) has an 
estimated start-up/total cost of 35.65. One could hastily assume that the
second query would have a faster execution time. However, if we compare the
queries' actual values, we notice that the first query has an actual time of 
0.018ms whereas the second query has an actual time of 0.028ms. 

When comparing the two query plans, it appears that their processes are 
somewhat similar: a HashAggregate followed by a SeqScan on bids.
One key distinction, however, is that the second query includes a Sort node.
This indicates that the second query has additional processing overhead 
compared to the first query, explaining its slower execution time. 


// Further Exploration

EXPLAIN ANALYZE SELECT name,
(SELECT COUNT(item_id) FROM bids WHERE item_id = items.id)
FROM items;

                                                 QUERY PLAN
-------------------------------------------------------------------------------------------------------------
 Seq Scan on items  (cost=0.00..25455.20 rows=880 width=40) (actual time=0.015..0.031 rows=6 loops=1)
   SubPlan 1
     ->  Aggregate  (cost=28.89..28.91 rows=1 width=8) (actual time=0.003..0.003 rows=1 loops=6)
           ->  Seq Scan on bids  (cost=0.00..28.88 rows=8 width=4) (actual time=0.001..0.002 rows=4 loops=6)
                 Filter: (item_id = items.id)
                 Rows Removed by Filter: 22
 Planning Time: 0.057 ms
 Execution Time: 0.049 ms


EXPLAIN ANALYZE SELECT items.name, COUNT(bids.item_id) FROM items
LEFT OUTER JOIN bids ON items.id = bids.item_id
GROUP BY items.name;

                                                     QUERY PLAN
---------------------------------------------------------------------------------------------------------------------
 HashAggregate  (cost=66.44..68.44 rows=200 width=40) (actual time=0.030..0.032 rows=6 loops=1)
   Group Key: items.name
   ->  Hash Right Join  (cost=29.80..58.89 rows=1510 width=36) (actual time=0.014..0.022 rows=27 loops=1)
         Hash Cond: (bids.item_id = items.id)
         ->  Seq Scan on bids  (cost=0.00..25.10 rows=1510 width=4) (actual time=0.001..0.003 rows=26 loops=1)
         ->  Hash  (cost=18.80..18.80 rows=880 width=36) (actual time=0.009..0.009 rows=6 loops=1)
               Buckets: 1024  Batches: 1  Memory Usage: 9kB
               ->  Seq Scan on items  (cost=0.00..18.80 rows=880 width=36) (actual time=0.005..0.006 rows=6 loops=1)
 Planning Time: 0.092 ms
 Execution Time: 0.070 ms

If we compare a scalar subquery and its non-subquery equivalent, we can see that
the scalar subquery has a faster execution time. In particular, we see that the
scalar subquery's query plan is not complex as that of the non-subquery
equivalent.